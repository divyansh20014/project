curl -X POST "https://devmag.adcb.com/auth/oauth/v2/token" \
  -H "Content-Type: application/x-www-form-urlencoded" \
  --cert client_cert.pem \
  --key client_key.pem \
  -d "grant_type=client_credentials&client_id=your_client_id&client_secret=your


curl -X POST "https://devmag.adcb.com/auth/oauth/v2/token" \
  -d "client_id=fe82e73c-9579-4e8a-ad33-9a3b86eedcc3" \
  -d "client_secret=b51c04e5-a205-4598-8138-426eada81e80" \
  -d "scope=AccountDetails AccountBalancesDetails CustomerPersonalDetails" \
  -d "grant_type=client_credentials"


openssl x509 -noout -modulus -in /path/to/client-cert.pem | openssl md5
openssl rsa -noout -modulus -in /path/to/client-key.pem | openssl md5

curl -k -X POST "https://devmag.adcb.com/auth/oauth/v2/token" \
-H "Content-Type: application/x-www-form-urlencoded" \
-d "client_id=fe82e73c-9579-4e8a-ad33-9a3b86eedcc3" \
-d "client_secret=b51c04e5-a205-4598-8138-426eada81e80" \
-d "scope=AccountDetails AccountBalancesDetails CustomerPersonalDetails" \
-d "grant_type=client_credentials" \
-v


import java.io.*;
import java.net.*;
import javax.net.ssl.*;
import java.security.*;
import java.security.cert.*;

public class OAuthClient {
    public static void main(String[] args) throws Exception {
        // Paths to the keystore
        String keystorePath = "path_to_your_keystore.jks";
        String keystorePassword = "your_keystore_password";  // Set your keystore password

        // API URL and data
        String urlString = "https://devmag.adcb.com/auth/oauth/v2/token";
        String clientId = "fe82e73c-9579-4e8a-ad33-9a3b86eedcc3";
        String clientSecret = "b51c04e5-a205-4598-8138-426eada81e80";
        String scope = "AccountDetails AccountBalancesDetails CustomerPersonalDetails";
        String grantType = "client_credentials";

        // Prepare the URL-encoded body
        String data = "client_id=" + clientId +
                      "&client_secret=" + clientSecret +
                      "&scope=" + scope +
                      "&grant_type=" + grantType;

        // Load the keystore with the certificates
        KeyStore keyStore = KeyStore.getInstance("JKS");
        try (FileInputStream keyStoreStream = new FileInputStream(keystorePath)) {
            keyStore.load(keyStoreStream, keystorePassword.toCharArray());
        }

        // Initialize the KeyManagerFactory with the keystore
        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
        kmf.init(keyStore, keystorePassword.toCharArray());

        // Initialize the TrustManagerFactory (can use the default or load custom trust store)
        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        tmf.init(keyStore);

        // Set up SSLContext with the KeyManager and TrustManager
        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), new SecureRandom());

        // Use HTTPS connection
        URL url = new URL(urlString);
        HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
        connection.setSSLSocketFactory(sslContext.getSocketFactory());
        connection.setRequestMethod("POST");
        connection.setDoOutput(true);
        connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");

        // Write the body data to the connection
        try (OutputStream os = connection.getOutputStream()) {
            byte[] input = data.getBytes("utf-8");
            os.write(input, 0, input.length);
        }

        // Get the response
        int responseCode = connection.getResponseCode();
        System.out.println("Response Code: " + responseCode);

        try (BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), "utf-8"))) {
            StringBuilder response = new StringBuilder();
            String responseLine;
            while ((responseLine = br.readLine()) != null) {
                response.append(responseLine.trim());
            }
            System.out.println("Response: " + response.toString());
        } catch (IOException e) {
            // Handle error (like 4xx, 5xx responses)
            try (BufferedReader br = new BufferedReader(new InputStreamReader(connection.getErrorStream(), "utf-8"))) {
                StringBuilder errorResponse = new StringBuilder();
                String errorLine;
                while ((errorLine = br.readLine()) != null) {
                    errorResponse.append(errorLine.trim());
                }
                System.err.println("Error Response: " + errorResponse.toString());
            }
        }
    }
}

import requests

# Define the URL
url = "https://devmag.adcb.com/auth/oauth/v2/token"

# Define the data to be sent in the POST request (application/x-www-form-urlencoded)
data = {
    'client_id': 'fe82e73c-9579-4e8a-ad33-9a3b86eedcc3',
    'client_secret': 'b51c04e5-a205-4598-8138-426eada81e80',
    'scope': 'AccountDetails AccountBalancesDetails CustomerPersonalDetails',
    'grant_type': 'client_credentials'
}

# Define the headers, including Content-Type
headers = {
    'Content-Type': 'application/x-www-form-urlencoded'
}

# Path to your client certificate and private key
cert_path = 'Signed_Request.pem'
key_path = 'private.pem.txt'

# Send the POST request with the certificate, private key, and disabling SSL verification (equivalent to curl -k)
response = requests.post(url, data=data, headers=headers, cert=(cert_path, key_path), verify=False)

# Print the response status and content
if response.status_code == 200:
    # Parse and print the access token from the response JSON
    access_token = response.json().get('access_token')
    print(f"Access Token: {access_token}")
else:
    print(f"Error: {response.status_code}")
    print(response.text)

