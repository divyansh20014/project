The error "alert handshake failure" typically indicates that there is an issue with the SSL/TLS handshake between the client and the server. This could be due to several reasons, including problems with the certificates, misconfiguration of the SSL context, or incompatibilities in SSL/TLS versions between the client and server.

Let’s go step by step to troubleshoot the issue and ensure your mTLS configuration works correctly.

Step-by-Step Troubleshooting
1. Check SSL/TLS Versions Compatibility
Ensure that both your client and server are using compatible TLS versions (e.g., TLS 1.2 or TLS 1.3). Sometimes, the client and server might be using incompatible versions, causing a handshake failure.

On the Server Side: Verify that the server is configured to accept the TLS version you're testing with (TLSv1.2 or TLSv1.3).
In your sslContextParameters bean on the server side, check the secureSocketProtocol. If it's set to TLS, make sure the server is configured to support TLS versions you intend to use:

xml
Copy code
<bean id="sslContextParameters" class="org.apache.camel.util.jsse.SSLContextParameters">
    <property name="keyManagers" ref="serverKeyManagers" />
    <property name="trustManagers" ref="serverTrustManagers" />
    <property name="secureSocketProtocol" value="TLSv1.2" /> <!-- Use TLSv1.2 or TLSv1.3 -->
</bean>
2. Check the Certificate Validity
Verify that the client and server certificates are valid and correctly signed.

Ensure the client certificate is correctly signed by the server’s CA (or a trusted root CA in the server's truststore).
Ensure the server certificate is correctly signed by a trusted CA in the client's truststore.
You can use openssl to check the certificate details:

bash
Copy code
openssl x509 -in client-cert.pem -text -noout
openssl x509 -in server-cert.pem -text -noout
Verify that both certificates contain correct Subject DN, Validity periods, etc.

3. Check the Client’s Certificate and Key
Ensure that the client certificate and client private key match correctly and are provided in the curl request.

Use the following curl command to include the client certificate and private key:

bash
Copy code
curl -v https://localhost:8443/my-endpoint \
    --cert client-cert.pem --key client-key.pem --cacert server-cert.pem
Important Check: Ensure that the certificate and private key are correctly extracted from the keystore (no mismatches between the private key and certificate).

4. Verify Client Authentication Settings on the Server
The server must be configured to require a client certificate, as it’s mTLS (Mutual TLS).

On the server side, ensure that client authentication is required (i.e., the server should expect a client certificate during the handshake).
xml
Copy code
<bean id="sslContextServerParameters" class="org.apache.camel.util.jsse.SSLContextServerParameters">
    <property name="clientAuthentication" value="REQUIRE" /> <!-- This is crucial for mTLS -->
</bean>
This configuration ensures that the server requires the client to provide a certificate during the handshake. Without this, the server will not expect or request the client’s certificate.

5. Verify Server’s Truststore
The server must trust the client’s certificate for the handshake to complete successfully. If you're using a self-signed certificate for the client, ensure the server’s truststore includes the client's certificate (or the root CA that signed the client certificate).

bash
Copy code
keytool -import -alias client -file client-cert.pem -keystore server-truststore.p12 -storetype PKCS12 -storepass serverTruststorePassword
This will ensure that the server can trust the client’s certificate when it presents it during the handshake.

6. Check Cipher Suites and SSL/TLS Parameters
Sometimes, an incompatible cipher suite or missing configuration can cause a handshake failure.

Make sure the server and client are negotiating the same cipher suite.
You can specify the cipher suites in your SSLContext on both the client and server to ensure compatibility.
7. Check Server Logs
The server logs may provide more detailed information about what is going wrong during the handshake. Look for logs related to SSL/TLS errors on the server side.

For example, in your Camel application, you might have logging configured. Check for any messages related to SSLContext, handshake, or client certificate validation.

8. Test with OpenSSL
You can use openssl to debug the handshake and see exactly where it fails.

Run this command to simulate the client-side connection to the server:

bash
Copy code
openssl s_client -connect localhost:8443 -cert client-cert.pem -key client-key.pem -CAfile server-cert.pem
If the connection fails, OpenSSL will give you more detailed debugging information, including the handshake process and the specific error that occurred.

Look for lines like:

python
Copy code
SSL handshake has read xxx bytes and written yyy bytes
This will tell you where the handshake is failing, and whether it’s a problem with the client, server, or certificates.

Additional Considerations:
Self-signed certificates: If you're using self-signed certificates for testing, you must import the server’s self-signed certificate into the client’s truststore (and vice versa for the server).

Use keytool to import the certificates:

bash
Copy code
keytool -import -alias server -file server-cert.pem -keystore client-truststore.p12 -storetype PKCS12 -storepass clientTruststorePassword
Check the Private Key Format: Ensure the private key is in the correct format (RSA, for example) and that no extra spaces or characters are included when you extract it from the keystore. Use openssl to inspect the private key and certificate files:

bash
Copy code
openssl rsa -in client-key.pem -check
openssl x509 -in client-cert.pem -text -noout
Recap of Things to Check:
Ensure that both client and server support the same TLS version (TLSv1.2 or TLSv1.3).
Check the client and server certificates to ensure they are valid, properly signed, and match their respective private keys.
Ensure the server is configured to require a client certificate during the handshake (mTLS).
Verify that the server’s TrustStore contains the client’s certificate (or CA).
Check the server logs for more detailed error information.
Use openssl s_client to diagnose the handshake error in more detail.
By following these steps and checking each part of your configuration, you should be able to resolve the handshake failure and get your mTLS configuration working correctly.



<bean id="jetty" class="org.apache.camel.component.jetty.JettyHttpComponent">
    <property name="sslSocketConnectors">
        <map>
            <entry key="8043">
                <bean class="org.eclipse.jetty.server.ssl.SslSelectChannelConnector">
                    <property name="password" value="..."/>
                    <property name="keyPassword" value="..."/>
                    <property name="keystore" value="..."/>
                    <property name="needClientAuth" value="..."/>
                    <property name="truststore" value="..."/>
                </bean>
            </entry>
        </map>
    </property>
</bean>


<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">

    <!-- Server's KeyStore (Server private key and certificate) -->
    <bean id="serverKeyStoreParams" class="org.apache.camel.component.ssl.KeyStoreParameters">
        <property name="resource" value="file:/users/home/server/keystore.jks"/>
        <property name="password" value="keystorePassword"/>
    </bean>

    <!-- Server's KeyManagers (Using the above KeyStore) -->
    <bean id="serverKeyManagersParams" class="org.apache.camel.component.ssl.KeyManagersParameters">
        <property name="keyStore" ref="serverKeyStoreParams"/>
        <property name="keyPassword" value="keyPassword"/>
    </bean>

    <!-- Server's TrustStore (To validate the client certificates) -->
    <bean id="serverTrustStoreParams" class="org.apache.camel.component.ssl.KeyStoreParameters">
        <property name="resource" value="file:/users/home/server/truststore.jks"/>
        <property name="password" value="truststorePassword"/>
    </bean>

    <!-- Server's TrustManagers (Using the above TrustStore) -->
    <bean id="serverTrustManagersParams" class="org.apache.camel.component.ssl.TrustManagersParameters">
        <property name="keyStore" ref="serverTrustStoreParams"/>
    </bean>

    <!-- Server SSLContext parameters -->
    <bean id="sslContextServerParams" class="org.apache.camel.component.ssl.SSLContextServerParameters">
        <property name="clientAuthentication" value="REQUIRE"/> <!-- Enforce client certificate authentication -->
        <property name="trustManagers" ref="serverTrustManagersParams"/> <!-- TrustStore for client certificates -->
    </bean>

    <!-- Server SSLContext configuration -->
    <bean id="sslContextParams" class="org.apache.camel.component.ssl.SSLContextParameters">
        <property name="serverParameters" ref="sslContextServerParams"/>
        <property name="keyManagers" ref="serverKeyManagersParams"/>
    </bean>


keytool -importcert -file client.crt -alias client-cert -keystore truststore.p12 -storetype PKCS12 -storepass truststorePassword
