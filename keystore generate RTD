1. Use Only the Server-Signed Certificate and Private Key:
If you don't have a CA file or intermediate certificates, Java can still be configured to use the server-signed certificate along with your private key, but you'll need to be careful about trusting the server. If the server is signed by a trusted authority, the default Java TrustStore should suffice. If it's not trusted (because it's signed by an internal CA or self-signed), you may run into certificate validation errors.

You can create a keystore that only contains your private key and the server-signed certificate.

2. Create a Keystore with the Server-Signed Certificate and Private Key:
If your certificate (Signed_Cert.pem) is directly signed by a CA, you can follow these steps to create a keystore.

Step 1: Create a PKCS12 Keystore Using OpenSSL
Use OpenSSL to create a PKCS12 file, which contains your private key and server-signed certificate.

bash
Copy code
openssl pkcs12 -export -in Signed_Cert.pem -inkey private.key -out keystore.p12 -name myalias
This command will:

-in Signed_Cert.pem: Use your server-signed certificate.
-inkey private.key: Use your private key.
-out keystore.p12: Output a PKCS12 keystore (keystore.p12).
-name myalias: An alias name for the certificate in the keystore.
You'll be prompted to enter a keystore password. This password will be required when you configure your Java application.

Step 2: Convert PKCS12 to JKS (if you need a JKS keystore)
If you need a JKS keystore (Java's default keystore format), you can convert the PKCS12 keystore created in the previous step into a JKS keystore using the keytool utility:

bash
Copy code
keytool -importkeystore -srckeystore keystore.p12 -srcstoretype pkcs12 -destkeystore keystore.jks -deststoretype JKS
keystore.p12: Your PKCS12 keystore file.
keystore.jks: The resulting JKS keystore file.
3. Configure Java Application to Use the Keystore
Now that you have a keystore (keystore.jks or keystore.p12), you'll need to configure your Java application to use this keystore for SSL.

In your Java code, set the system properties to point to your keystore and the keystore password:

java
Copy code
String keyPath = "/path/to/your/keystore.jks";  // Path to your keystore (can be PKCS12 format too)
String keyPass = "yourKeystorePassword";  // Password for your keystore
String keyType = "JKS";  // "PKCS12" if using a PKCS12 keystore

// Set system properties for Java SSL configuration
System.setProperty("javax.net.ssl.keyStore", keyPath);  // Path to keystore
System.setProperty("javax.net.ssl.keyStorePassword", keyPass);  // Keystore password
System.setProperty("javax.net.ssl.keyStoreType", keyType);  // Keystore type (JKS or PKCS12)
